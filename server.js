require('dotenv').config();

const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const cron = require('node-cron');
const app = express();
const PORT = process.env.PORT || 3000;
// ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò 3 –°–¢–†–û–ö–ò –î–õ–Ø CORS ‚úÖ‚úÖ‚úÖ
const cors = require('cors'); // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç
app.use(cors());              // 2. –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å–æ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
// app.use(cors({ origin: 'https://–≤–∞—à-—Å–∞–π—Ç.ru' })); // –ò–ª–∏ —Ç–∞–∫, –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
// Middleware
app.use(bodyParser.json());
app.use(express.static('public')); // –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

// –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ Telegram –∏–∑ .env —Ñ–∞–π–ª–∞
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8078550568:AAEtW8cTX3Rw_x1rUIJTg9Q46pntJVfOhuw';
const TELEGRAM_GROUP_ID = process.env.TELEGRAM_GROUP_ID || '-4795204209';
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if (!TELEGRAM_BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

console.log('Server starting...');
console.log('Telegram Bot Token:', TELEGRAM_BOT_TOKEN);
console.log('Telegram Group ID:', TELEGRAM_GROUP_ID);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let messages = {};
let userSessions = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, text, parse_mode = 'HTML') {
    try {
        const response = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
            chat_id: chatId,
            text: text,
            parse_mode: parse_mode,
            disable_web_page_preview: true
        });
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.response?.data || error.message);
        throw error;
    }
}

// –ö–æ—Ä–Ω–µ–≤–æ–π route –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'RustorgUO Support Server is running',
        timestamp: new Date().toISOString()
    });
});

// –í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
app.post('/webhook', async (req, res) => {
    try {
        console.log('Webhook received:', JSON.stringify(req.body, null, 2));
        
        const { message } = req.body;
        
        if (message && message.text) {
            const chatId = message.chat.id;
            const text = message.text;
            const userId = message.from.id;
            const userName = message.from.first_name + (message.from.last_name ? ' ' + message.from.last_name : '');
            
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (${userId}): ${text}`);
            
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if (chatId.toString() === TELEGRAM_GROUP_ID.replace('-100', '-')) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (message.reply_to_message && message.reply_to_message.text) {
                    const originalMessage = message.reply_to_message.text;
                    // –ò—â–µ–º userId –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–º—ã –µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ)
                    const userIdMatch = originalMessage.match(/User ID: (\S+)/);
                    
                    if (userIdMatch && userIdMatch[1]) {
                        const targetUserId = userIdMatch[1];
                        
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        const responseText = `üë®‚Äçüíº <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ RUSTORGUO:</b>\n${text}`;
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try {
                            await sendTelegramMessage(targetUserId, responseText);
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                            if (!messages[targetUserId]) {
                                messages[targetUserId] = [];
                            }
                            messages[targetUserId].push({
                                text: text,
                                timestamp: new Date(),
                                from: 'support',
                                supportAgent: userName
                            });
                            
                            console.log(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                            await sendTelegramMessage(TELEGRAM_GROUP_ID, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
                            
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
                            await sendTelegramMessage(TELEGRAM_GROUP_ID, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
                        }
                    }
                }
            }
        }
        
        res.sendStatus(200);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ webhook:', error);
        res.status(500).send('Internal Server Error');
    }
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∞–π—Ç–∞
app.post('/api/send-message', async (req, res) => {
    try {
        const { userId, userName, userEmail, text, pageUrl } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!text || text.trim().length === 0) {
            return res.status(400).json({ 
                success: false, 
                error: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        const sessionId = userId || `web_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!messages[sessionId]) {
            messages[sessionId] = [];
        }
        messages[sessionId].push({
            text: text,
            timestamp: new Date(),
            from: 'user',
            userName: userName || '–ì–æ—Å—Ç—å',
            userEmail: userEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const telegramMessage = `
üì© <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ß–ê–¢–ê RUSTORGUO</b>
‚îå‚îÄ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userName || '–ì–æ—Å—Ç—å'}
‚îú‚îÄ <b>Email:</b> ${userEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚îú‚îÄ <b>User ID:</b> <code>${sessionId}</code>
‚îú‚îÄ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${pageUrl || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚îú‚îÄ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
‚îî‚îÄ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> 
${text}
        `.trim();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Telegram
        try {
            await sendTelegramMessage(TELEGRAM_GROUP_ID, telegramMessage);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userSessions[sessionId] = {
                userName: userName || '–ì–æ—Å—Ç—å',
                userEmail: userEmail || '–ù–µ —É–∫–∞–∑–∞–Ω',
                lastActivity: new Date()
            };
            
            res.json({ 
                success: true, 
                sessionId: sessionId,
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É' 
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            res.status(500).json({ 
                success: false, 
                error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É' 
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages/:sessionId', (req, res) => {
    try {
        const sessionId = req.params.sessionId;
        const userMessages = messages[sessionId] || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        const recentMessages = userMessages.slice(-50);
        
        res.json({
            success: true,
            messages: recentMessages,
            count: recentMessages.length
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π' 
        });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        serverTime: new Date().toLocaleString('ru-RU'),
        messagesCount: Object.keys(messages).length,
        usersCount: Object.keys(userSessions).length
    });
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.post('/set-webhook', async (req, res) => {
    try {
        const webhookUrl = process.env.RENDER_EXTERNAL_URL ? 
            `${process.env.RENDER_EXTERNAL_URL}/webhook` : 
            req.body.webhookUrl;
            
        if (!webhookUrl) {
            return res.status(400).json({ error: 'URL –≤–µ–±—Ö—É–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }
        
        console.log('Setting webhook to:', webhookUrl);
        
        const response = await axios.post(
            `${TELEGRAM_API_URL}/setWebhook`, 
            { url: webhookUrl }
        );
        
        res.json(response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞',
            details: error.response?.data || error.message 
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
app.post('/delete-webhook', async (req, res) => {
    try {
        const response = await axios.post(
            `${TELEGRAM_API_URL}/deleteWebhook`
        );
        res.json(response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞',
            details: error.response?.data || error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ
app.get('/get-webhook-info', async (req, res) => {
    try {
        const response = await axios.get(
            `${TELEGRAM_API_URL}/getWebhookInfo`
        );
        res.json(response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ',
            details: error.response?.data || error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
app.get('/get-bot-info', async (req, res) => {
    try {
        const response = await axios.get(
            `${TELEGRAM_API_URL}/getMe`
        );
        res.json(response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ',
            details: error.response?.data || error.message 
        });
    }
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00)
cron.schedule('0 3 * * *', () => {
    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));
    
    let clearedCount = 0;
    
    for (const sessionId in userSessions) {
        if (userSessions[sessionId].lastActivity < thirtyDaysAgo) {
            delete userSessions[sessionId];
            delete messages[sessionId];
            clearedCount++;
        }
    }
    
    console.log(`–û—á–∏—â–µ–Ω–æ ${clearedCount} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('Unhandled error:', error);
    res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).json({ 
        success: false, 
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' 
    });
});

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç –õ–æ–∫–∞–ª—å–Ω—ã–π URL: http://localhost:${PORT}`);
    console.log(`ü§ñ Telegram Bot: ${TELEGRAM_BOT_TOKEN}`);
    console.log(`üë• Telegram Group: ${TELEGRAM_GROUP_ID}`);
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
});